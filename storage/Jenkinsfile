#!groovy
@Library("jenkinsLibrary@master") _
def tools = new org.devops.tools()

String workspace = "/opt/jenkins/workspace"

//Pipeline Start
pipeline {
    agent { node {  label "master"   
                    customWorkspace "${workspace}"   
            }
    }

    options {
        timestamps()  //日志显示时间
        skipDefaultCheckout()  //删除隐式checkout scm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time: 1, unit: 'HOURS')  //流水线超时设置1h
    }

    stages {
        //Download Code
        stage("Download Code"){ 
            steps{  
                timeout(time:5, unit:"MINUTES"){   
                    script{ 
                        //println('Download Code')
                        tools.PrintMes('Download Code','green')
                    }
                }
            }
        }   
    
         stage("Project Pakeges"){
            failFast true
            parallel {

                 stage("Build"){
                    steps{
                        timeout(time:20, unit:"MINUTES"){
                            script{
                                //println('Project Pakeges')
                                tools.PrintMes("Project Pakege",'green')
                                // mvnHome = tool "m2"
                                //println(mvnHome)
                                
                                //sh "${mvnHome}/bin/mvn --version"
                            }
                        }
                    }
                }
                //Scon Code
                stage("Scon Code"){
                    steps{
                        timeout(time:30, unit:"MINUTES"){
                            script{
                                //print("Scon Code")
                                tools.PrintMes("Scon Code",'green')
                            }
                        }
                    }
                }
            }
        }
    } 
       //End of construction information
    post {
        always {
            script{
                println("always")
            }
        }
        success {
            script{
                currentBuild.description = "\n Successful construction!" 
            }
        }
        failure {
            script{
                currentBuild.description = "\n Build failed!" 
            }
        }
        aborted {
            script{
                currentBuild.description = "\n Build cancel!" 
            }
        }
    }
}